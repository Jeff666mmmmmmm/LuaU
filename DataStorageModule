-- Module table
local MyModule = {}

-- Services
local DataStore = game:GetService("DataStoreService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Get datastore function
function MyModule.getDataFromDataStore(sectionName, user)

	-- Variable for has attempted
	local attempts = 0
	local maxAttempts = 2

	-- Get datastore section from text given
	local sectionSuccess, DataStoreSection = pcall(function()
		return DataStore:GetDataStore(sectionName)
	end)

	-- Section not found
	if not sectionSuccess then

		-- Warn of error
		warn("F - getDataFromDataStore - Failed retrieving data section " .. user.userId .. ": " .. sectionName)
		return
	end

	-- Attempt to get datastore data if not max attempts and section found
	while attempts < maxAttempts do
		
		-- Attempt
		local success, result = pcall(function()
			return DataStoreSection:GetAsync(user.userId)
		end)

		if success then

			-- Return result or nil if empty
			return result or nil
		else
			-- Failed and trys once more
			attempts = attempts + 1
			
			-- If first attempt failed, wait and attempt again, else, report error
			if attempts < maxAttempts then
				task.wait(5)
			else
				-- Warn of error
				warn("F - getDataFromDataStore - Failed retrieving data user " .. user.userId)
			end
		end
	end

	return nil
end

-- Set datastore function
function MyModule.setDataToDataStore(sectionName, user, data, deadline)

	-- If deadline for setting data, then set data end early
	if deadline then

		DataStore:GetDataStore(sectionName):SetAsync(user.userId, data)
		return
	end
	
	-- Variable for has attempted
	local attempts = 0
	local maxAttempts = 2

	-- Get datastore section from text given
	local sectionSuccess, DataStoreSection = pcall(function()
		
		return DataStore:GetDataStore(sectionName)
	end)

	-- Section not found
	if not sectionSuccess then

		-- Warn of error
		warn("F - setDataToDataStore - Failed set data section " .. user.userId .. ": " .. sectionName)
		return
	end

	-- Attempt to set datastore data
	while attempts < maxAttempts do
		
		-- Get datastore section from text given
		local success, result = pcall(function()

			DataStoreSection:SetAsync(user.userId, data)
		end)

		if not success then

			-- Failed and tries once more
			attempts = attempts + 1
			
			-- If first attempt failed, wait and attempt again, else, report error
			if attempts < maxAttempts then
				
				task.wait(5)
			else
				-- Warn of error
				warn("F - setDataToDataStore - Failed setting data for user " .. user.userId .. ": " .. result, false)
			end
		end
	end
end

-- Get sorted datastore
function MyModule.getSortedDataStore(dataStoreName, sortAscending, pageSize)

	-- Attempt to retrieve an OrderedDataStore object from the DataStore service
	local success, orderedDataStore = pcall(function()
		return DataStore:GetOrderedDataStore(dataStoreName)
	end)

	-- Check if the retrieval of OrderedDataStore was successful
	if not success then
		warn("Failed to get OrderedDataStore: " .. dataStoreName)
		return nil
	end

	-- Attempt to retrieve sorted data from the OrderedDataStore
	local success, data = pcall(function()
		return orderedDataStore:GetSortedAsync(sortAscending, pageSize)
	end)

	-- Check if the retrieval of sorted data was successful and return the data if it was
	if success then
		return data
	else
		-- Warn of error
		warn("Failed to retrieve sorted data from OrderedDataStore: " .. dataStoreName)
		return nil
	end
end

-- Get current page
function MyModule.getCurrentPage(dataStorePages)

	-- Check if the DataStorePages object is provided and not nil
	if not dataStorePages then
		warn("DataStorePages object is nil")
		return nil
	end

	-- Attempt to get the current page of data from the DataStorePages object
	local success, currentPage = pcall(function()
		return dataStorePages:GetCurrentPage()
	end)

	-- Check if the retrieval of the current page was successful
	if success then
		return currentPage
	else
		-- Warn of error
		warn("Failed to get the current page")
		return nil
	end
end

-- Get orderd data
function MyModule.getOrderedDataStore(dataStoreName)

	-- Attempt to retrieve an OrderedDataStore object using the provided dataStoreName
	local success, orderedDataStore = pcall(function()
		return DataStore:GetOrderedDataStore(dataStoreName)
	end)

	-- Check if the retrieval of the OrderedDataStore was successful
	if success then
		return orderedDataStore
	else
		-- Warn of error
		warn("Failed to get OrderedDataStore: " .. dataStoreName)
		return nil
	end
end

-- Utility function to fix the data type
function MyModule.checkDataType(value, expectedType)
	local valueType = type(value)

	if valueType == expectedType then
		return value
	else
		-- Warn of error
		warn("F - checkDataType Expected (" .. expectedType .. ") got (" .. valueType..") for "..value)
		return nil
	end
end

return MyModule
