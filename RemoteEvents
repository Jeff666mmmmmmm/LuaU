-- Services
local DataStore = game:GetService("DataStoreService")
local MarketplaceService = game:GetService("MarketplaceService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProximityPromptService = game:GetService("ProximityPromptService")
local playerService = game:GetService('Players')
local Debris = game:GetService("Debris")

-- Remote events
local NotificationEvent = ReplicatedStorage:WaitForChild("Event_notification")
local DeathEvent = ReplicatedStorage:WaitForChild("Event_die")
local BuyGamePassEvent = ReplicatedStorage:WaitForChild("Event_buypass")
local BuyItemEvent = ReplicatedStorage:WaitForChild("Event_Buyitem")
local openQuestGuiEvent = ReplicatedStorage:WaitForChild("Event_TriggerQuestGui")
local openCustomePickaxeGuiEvent = ReplicatedStorage:WaitForChild("Event_PickaxeShop")
local triggerShopGuiEvent = ReplicatedStorage:WaitForChild("Event_TriggerCam")
local updateBackPackNumberEvent = ReplicatedStorage:WaitForChild("Event_updatebackpacknumber")
local updateBackPackEvent = ReplicatedStorage:WaitForChild("Event_updatebackpack")
local updatePickaxeEvent = ReplicatedStorage:WaitForChild("Event_updatepickaxe")
local teleportEvent = ReplicatedStorage:WaitForChild("Event_Teleport")

-- Replicated items
local PickaxeFolder = ReplicatedStorage.pickfolder
local BackpackFolder = ReplicatedStorage.backfolder
local PickaxeSkinsFolder = ReplicatedStorage.pickskins
local PickaxeModelFolder = ReplicatedStorage.pickmodel
local EffectsFolder = ReplicatedStorage.effects
local AudioFolder = ReplicatedStorage.audio

-- Ore Data
local OreData = require(ReplicatedStorage.OreDataModuleScript)

-- Get a random direction
local function randomDirection()
	
	local x = math.random() * 2 - 1
	local y = math.random() * 2 - 1
	local z = math.random() * 2 - 1
	
	return Vector3.new(x, y, z).Unit
end

-- Is audio valid function
local function IsValidAudio(AudioId)
	if AudioId and typeof(AudioId) == "number" then

		local Success, AssetInfo = pcall(MarketplaceService.GetProductInfo, MarketplaceService, AudioId)
		
		-- If audio exists, return true or false
		if Success and AssetInfo.AssetTypeId == 3 then
			return true
		else
			return false
		end

		-- Not a number
	else
		return false
	end
end

-- Load user pickaxe
local function loadpickaxe(player, isSkinNew)
	
	-- Get player bools
	local userSavingBools = player.savingnonboolstats

	-- Remove old pickaxe from backpack
	if player.Backpack:FindFirstChild("Pickaxe") then
		player.Backpack.Pickaxe:Destroy()
	end
	
	-- Remove old pickaxe from character
	if player.Character:FindFirstChild("Pickaxe") then
		player.Character.Pickaxe:Destroy()
	end

	-- Generate new pickaxe model
	local newPickaxe = PickaxeModelFolder["model"..userSavingBools.pickaxemodel.Value].Pickaxe:Clone()
	newPickaxe.Parent = player.Backpack
	
	local pickaxeAnimationsClone = PickaxeModelFolder.Animations:Clone()
	pickaxeAnimationsClone.Parent = newPickaxe

	-- Create value for skin to use
	local storedSkin = ""
	
	-- Load skin
	if isSkinNew == "new" then
		storedSkin = PickaxeSkinsFolder["skin"..userSavingBools.PickaxeSkin.Value]
	else
		storedSkin = PickaxeSkinsFolder["skin"..PickaxeFolder["pick"..userSavingBools.pickaxenumber.Value]:GetAttribute("skin")]
	end

	newPickaxe.Handle.Color = storedSkin.Handle.Color 
	newPickaxe.Handle.Material = storedSkin.Handle.Material
	
	-- Get olny the materials and shorten code
	local pickaxeObjects = newPickaxe.Union
	
	-- Set pickaxe color and material
	pickaxeObjects.Base.Color = storedSkin.Base.Color
	pickaxeObjects.Base.Material = storedSkin.Base.Material

	pickaxeObjects.Top.Color = storedSkin.Top.Color
	pickaxeObjects.Top.Material = storedSkin.Top.Material

	pickaxeObjects.FrontWedge.Color = storedSkin.FrontWedge.Color
	pickaxeObjects.FrontWedge.Material = storedSkin.FrontWedge.Material

	pickaxeObjects.BackWedge.Color = storedSkin.BackWedge.Color
	pickaxeObjects.BackWedge.Material = storedSkin.BackWedge.Material

	-- Load stored audio if user chose a set audio, -1 = no music, 0 = user chosen music
	if userSavingBools.music.Value ~= 0 and userSavingBools.music.Value ~= -1 then
		
		-- Load audio
		local audioClone = AudioFolder["music"..userSavingBools.music.Value]:Clone()
		audioClone.Parent = newPickaxe.Handle
		
		-- Load audio script
		local audioScriptClone = game.ServerStorage.AudioScript:Clone()
		audioScriptClone.Parent = audioClone
		
	end

	-- Load user chosen music
	if userSavingBools.music.Value == 0 and player.stats.vip_pass.Value == true then
		
		-- Load empty audio
		local audioClone = AudioFolder.music1:Clone()
		audioClone.Parent = newPickaxe.Handle
		
		-- Load audio script
		local audioScriptClone = game.ServerStorage.AudioScript:Clone()
		audioScriptClone.Parent = audioClone
		
		-- Set audio to chosen song
		audioClone.SoundId = ("rbxassetid://"..player.stats.AudioID.Value)
		
	end

	-- Load effect to pickaxe
	if userSavingBools.effect.Value ~= 0 then
		
		local effectClone = EffectsFolder["trail"..userSavingBools.effect.Value]:Clone()
		effectClone.Parent = newPickaxe.Handle
	end
	
	-- Update hitpower from current pickaxe owned
	player.stats.HitPower.Value = PickaxeFolder["pick"..userSavingBools.pickaxenumber.Value]:GetAttribute("storage")	
end

-- Buy item request
BuyItemEvent.OnServerEvent:Connect(function(player, buyRequest, itemid)
	
	-- Get data
	local userCash = player:WaitForChild("leaderstats", 10).Money or 0
	itemid = itemid or 1
	
	-- Get player bools
	local userSavingBools = player.savingnonboolstats

	-- Request to buy a backpack
	if buyRequest == "BackPack" then
		
		-- If backpack with given itemid exists, contine
		if BackpackFolder:FindFirstChild("back"..itemid) then
			
			-- If user has sufficent cash, and does not own item aredy, contine
			if userCash.Value >= BackpackFolder["back"..itemid]:GetAttribute("price") and player.savingstats["back"..itemid].Value == false then

				-- Update stats in game
				player.savingstats["back"..itemid].Value = true
				userCash.Value -= BackpackFolder["back"..itemid]:GetAttribute("price")
				player.stats.BackPacksize.Value = BackpackFolder["back"..itemid]:GetAttribute("storage")
				userSavingBools.backpacknumber.Value = itemid
				
				-- Update dateStore for item
				local dataStoreSlot = DataStore:GetDataStore("back"..itemid)
				dataStoreSlot:SetAsync(player.UserId, true)


				-- Remove old backpack
				if player.Character:FindFirstChild("PlayerBackPack")then
					player.Character.PlayerBackPack:Destroy()
				end

				-- Generate new backpack 
				local newBackpackclone = BackpackFolder["back"..itemid]:Clone()
				newBackpackclone.Parent = player.Character
				newBackpackclone.Name = "PlayerBackPack"

				-- Notification to user
				NotificationEvent:FireClient(player, BackpackFolder["back"..itemid]:GetAttribute("name"), "1", "BuyItem")
				
				return
			end 
		end	

	-- Request to buy a pickaxe
	elseif buyRequest == "Pickaxe" then 
		
		-- If pickaxe with given itemid exists, contine
		if PickaxeFolder:FindFirstChild("pick"..itemid) then
			
			-- If user has sufficent cash, and does not own item aredy, contine
			if userCash.Value >= PickaxeFolder["pick"..itemid]:GetAttribute("price") and player.savingstats["pick"..itemid].Value == false then

				-- Update stats in game
				player.savingstats["pick"..itemid].Value = true
				userCash.Value -= PickaxeFolder["pick"..itemid]:GetAttribute("price")
				userSavingBools.pickaxenumber.Value = itemid
				userSavingBools.PickaxeSkin.Value = PickaxeFolder["pick"..itemid]:GetAttribute("skin")
				player.savingstats["skin"..PickaxeFolder["pick"..itemid]:GetAttribute("skin")].Value = true
				
				-- Update dateStore for item
				local dataStoreSlot = DataStore:GetDataStore("pick"..itemid)
				dataStoreSlot:SetAsync(player.UserId, true)


				-- Generate new pickaxe
				loadpickaxe(player, "new")

				-- Notification to user
				NotificationEvent:FireClient(player, PickaxeFolder["pick"..itemid]:GetAttribute("name"), "1", "BuyItem")
				
				return
			end 
		end

		-- Request to buy a pickaxe skin
	elseif buyRequest == "skin" then
		
		-- If skin with given itemid exists, continue
		if PickaxeSkinsFolder:FindFirstChild("skin"..itemid) then
			
			-- If user has sufficent cash, and does not own item aredy, and is avaible to buy, contine
			if userCash.Value >= PickaxeSkinsFolder["skin"..itemid]:GetAttribute("price") and player.savingstats["skin"..itemid].Value == false and PickaxeSkinsFolder["skin"..itemid]:GetAttribute("buy") == true then

				-- Update stats in gam
				player.savingstats["skin"..itemid].Value = true
				userCash.Value -= PickaxeSkinsFolder["skin"..itemid]:GetAttribute("price")
				
				-- Update dateStore for item
				local dataStoreSlot = DataStore:GetDataStore("skin"..itemid)
				dataStoreSlot:SetAsync(player.UserId, true)

				-- Notification to user
				NotificationEvent:FireClient(player, PickaxeSkinsFolder["skin"..itemid]:GetAttribute("name").." Skin", "1", "BuyItem")
				
				return
			end 
		end

		-- Request to buy a pickaxe model
	elseif buyRequest == "model" then
		
		-- If model with given itemid exists, continue
		if PickaxeModelFolder:FindFirstChild("model"..itemid) then
			
			-- If user has sufficent cash, and does not own item aredy, and is avaible to buy, contine
			if userCash.Value >= PickaxeModelFolder["model"..itemid]:GetAttribute("price") and player.savingstats["model"..itemid].Value == false and PickaxeModelFolder["model"..itemid]:GetAttribute("buy") == true then

				-- Update stats in gam
				player.savingstats["model"..itemid].Value = true
				userCash.Value -= PickaxeModelFolder["model"..itemid]:GetAttribute("price")
				
				-- Update dateStore for item
				local dataStoreSlot = DataStore:GetDataStore("model"..itemid)
				dataStoreSlot:SetAsync(player.UserId, true)

				-- Notification to user
				NotificationEvent:FireClient(player, PickaxeModelFolder["model"..itemid]:GetAttribute("name").." Frame", "1", "BuyItem")
				
				return
			end 
		end

		-- Request to buy a pickaxe trail
	elseif buyRequest == "trail" then
		
		-- If trail with given itemid exists, continue
		if EffectsFolder:FindFirstChild("trail"..itemid) then
			
			-- If user has sufficent cash, and does not own item aredy, and is avaible to buy, contine
			if userCash.Value >= EffectsFolder["trail"..itemid]:GetAttribute("price") and player.savingstats["effect"..itemid].Value == false and EffectsFolder["trail"..itemid]:GetAttribute("buy") == true then

				-- Update stats in gam
				player.savingstats["effect"..itemid].Value = true
				userCash.Value -= EffectsFolder["trail"..itemid]:GetAttribute("price")
				
				-- Update dateStore for item
				local dataStoreSlot = DataStore:GetDataStore("trail"..itemid)
				dataStoreSlot:SetAsync(player.UserId, true)

				-- Notification to user
				NotificationEvent:FireClient(player, EffectsFolder["trail"..itemid]:GetAttribute("name").." Trail", "1", "BuyItem")
				
				return
			end 
		end

		-- MUSIC
	elseif buyRequest == "music" then
		
		-- If audio with given itemid exists, continue
		if AudioFolder:FindFirstChild("music"..itemid) then
			
			-- If user has sufficent cash, and does not own item aredy, and is avaible to buy, contine
			if userCash.Value >= AudioFolder["music"..itemid]:GetAttribute("price") and player.savingstats["music"..itemid].Value == false and AudioFolder["music"..itemid]:GetAttribute("buy") == true then

				-- Update stats in gam
				player.savingstats["music"..itemid].Value = true
				userCash.Value -= AudioFolder["music"..itemid]:GetAttribute("price")
				
				-- Update dateStore for item
				local dataStoreSlot = DataStore:GetDataStore("music"..itemid)
				dataStoreSlot:SetAsync(player.UserId, true)

				-- Notification to user
				NotificationEvent:FireClient(player, AudioFolder["music"..itemid]:GetAttribute("name").." Music", "1", "BuyItem")
				
				return
			end
		end

	end 


end)

-- Update backpack storage text
updateBackPackNumberEvent.OnServerEvent:Connect(function(player)
	
	-- If user has a backpack
	if player.Character:FindFirstChild("PlayerBackPack") then

		-- Change text
		player.Character.PlayerBackPack.Text.gui.TextLabel.Text = ((player.stats.TotalBackPackinput.Value.."/"..player.stats.BackPacksize.Value.." Storage"))
	end
end)

-- Equipt backpack
updateBackPackEvent.OnServerEvent:Connect(function(player, number)
	number = number or 1

	-- If backpack exists
	if player.savingstats:FindFirstChild("back"..number) then
		
		-- If owned then equipt
		if player.savingstats["back"..number].Value == true then

			-- Destroy old backpack if found
			if player.Character:FindFirstChild("PlayerBackPack") then
				player.Character.PlayerBackPack:Destroy()
			end

			-- Update backpack number
			player.savingnonboolstats.backpacknumber.Value = number

			-- Generate new backpack
			local clone = BackpackFolder["back"..number]:Clone()
			clone.Parent = player.Character
			clone.Name = "PlayerBackPack"

			if player.savingstats["back"..number].Value == true then
				player.stats.BackPacksize.Value = BackpackFolder["back"..number]:GetAttribute("storage")
			end

		end
	end
end)

-- Request to generate new pickaxe
updatePickaxeEvent.OnServerEvent:Connect(function(player, number, load, skin, audio, model, effect, AudioID)
	
	-- Set default values
	number = number or 0
	skin = skin or 0
	audio = audio or 0
	model = model or 0
	effect = effect or 0

	-- Generates chosen pickaxe
	if load == "equipt" then
		-- If pickaxe number exists
		if player.savingstats:FindFirstChild("pick"..number) then
			-- If user owns this pickaxe
			if player.savingstats:FindFirstChild("pick"..number).Value == true then

				-- Update in game stats
				player.savingnonboolstats.pickaxenumber.Value = number
				player.savingnonboolstats.PickaxeSkin.Value = PickaxeFolder["pick"..number]:GetAttribute("skin")
				player.savingstats["skin"..PickaxeFolder["pick"..number]:GetAttribute("skin")].Value = true

				-- Generate orignal pickaxe
				loadpickaxe(player, "orignal")
			end
		end

		-- Request for custome pickaxe
	elseif load == "new" then
		
		-- User saving bools
		local bools = player.savingstats

		-- Custome skin
		if skin ~= 0 then
			-- Does skin exist
			local findSkin = bools:FindFirstChild("skin"..skin)
			if findSkin then 
				-- If user has skin then equipt it
				if findSkin.Value == true then
					player.savingnonboolstats.PickaxeSkin.Value = skin
				end
			end
		end

		-- Set audio
		if audio ~= -1 then
			
			-- Does audio exist
			local findAudio = bools:FindFirstChild("music"..audio)
			if findAudio then
				if findAudio.Value == true then
					player.savingnonboolstats.music.Value = audio
				end
			end
		end

		-- Custome audio
		if audio == 0 then
			-- Check to make sure valid audio id
			if IsValidAudio(AudioID) == true then
				
				-- Check to see if player has vip
				if player.stats.vip_pass == true then
					
					player.savingnonboolstats.music.Value = 0 
					player.stats.AudioID.Value = (AudioID or 0)
					
					local dataStoreSlot = DataStore:GetDataStore("MusicID")
					dataStoreSlot:SetAsync(player.UserId, player.stats.AudioID.Value)
				end
			else

				-- Notifaction to user of error
				NotificationEvent:FireClient(player, "Invalid Audio ID", nil, "Error")
			end
		end

		-- No audio
		if audio == -1 then
			player.savingnonboolstats.music.Value = -1
		end 

		-- Custome model
		if model ~= 0 then
			-- Ensure model exists
			local findModel = bools:FindFirstChild("model"..model)
			if findModel then 
				-- If user owns it
				if findModel.Value == true then

					player.savingnonboolstats.pickaxemodel.Value = model
				end 
			end 
		end

		-- Custome effect
		if effect ~= 0 then
			
			-- Ensure effect exists
			local findEffect = bools:FindFirstChild("effect"..effect)
			if findEffect then
				-- If user owns it
				if findEffect.Value == true then

					player.savingnonboolstats.effect.Value = effect
				end 
			end 
		else
			-- No trail
			player.savingnonboolstats.effect.Value = 0
		end

		-- Generate new pickaxe
		loadpickaxe(player, "new")
	end

end)

-- Teleport user request
teleportEvent.OnServerEvent:Connect(function(player, location)
	-- Get height
	local userHeight = player.Character:FindFirstChild("HumanoidRootPart").Position.Y or 0

	-- Request to surface
	if location == "Surface" then

		-- Max height
		if userHeight > 0 then
			userHeight = 0 
		end
		-- Correct cost
		if userHeight < 0 then
			userHeight = math.abs(userHeight)
			userHeight = userHeight/2
			userHeight = math.round(userHeight)
		end
		-- Min cost
		if userHeight < 15 then
			userHeight = 15
		end
		-- Vip discount
		if player.stats.vip_pass.Value == true then
			userHeight -= math.round(userHeight*.05)
		end

		-- Update in game stats
		if userHeight <= player.leaderstats.Money.Value then
			player.leaderstats.Money.Value -= userHeight
			
			-- Teleport user
			player.Character:MoveTo(game.Workspace.SurfaceMineshaft.Teleport_part.Position)
		end

	end

end)

-- Buy gamepass
BuyGamePassEvent.OnServerEvent:Connect(function(player, id, info)

	-- Ensure request is for gamepass
	if info == "VIP" then
		
		-- Prompt purchase
		MarketplaceService:PromptGamePassPurchase(player, id)
	end 

end)

-- Manage recept
game:GetService("MarketplaceService").ProcessReceipt = function(ReceiptInfo)
	local Purchasing_Player = game.Players:GetPlayerByUserId(ReceiptInfo.PlayerId)

	-- Player recives cash type one
	if ReceiptInfo.ProductId == 1211101864 then
		if Purchasing_Player and Purchasing_Player:FindFirstChild('leaderstats') then
			Purchasing_Player.leaderstats.Money.Value += 550

			-- Notifaction to user
			NotificationEvent:FireClient(Purchasing_Player, "Money", "550", "Money")
		end 
	end

	-- Player recives cash type two
	if ReceiptInfo.ProductId == 1211101865 then
		if Purchasing_Player and Purchasing_Player:FindFirstChild('leaderstats') then
			Purchasing_Player.leaderstats.Money.Value += 2600

			-- Notifaction to user
			NotificationEvent:FireClient(Purchasing_Player, "Money", "2600", "Money")
		end
	end	

	-- Tell roblox that transaction cleared
	return Enum.ProductPurchaseDecision.PurchaseGranted

end

-- Drops users backpack
local function dropBackPack(user, character)

	-- Gather value for data analysis
	local itemsValue = 0

	local dropedItemsFolder = Instance.new("Folder")
	dropedItemsFolder.Name = "dropedItemsFolder"
	dropedItemsFolder.Parent = game.Workspace.DebrisReadyFolder

	-- Ignore player with raycast
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Include
	raycastParams.FilterDescendantsInstances = {workspace.Terrain}


	-- Gather all items in backpack
	for _, item in pairs(user.stats.Inventory:GetChildren()) do

		for i = 1, math.clamp(item.Value, 1, 6) do
			
			task.wait(0.1)
			
			itemsValue += OreData[item.Name].v

			local part = Instance.new("Part")

			part.Parent = dropedItemsFolder
			part.Size = Vector3.new(1, 1, 1)
			part.Material = OreData[item.Name].m
			part.Color = OreData[item.Name].c
			part.Anchored = true
			part:SetAttribute("ore", item.Name)
			Debris:AddItem(part, math.random(1, 20) + 100)

			local raycastDirection = randomDirection()

			local raycastDistance = math.random(2, 14)

			-- Perform the raycast
			local rayResult = workspace:Raycast(character.HumanoidRootPart.Position, raycastDirection * raycastDistance, raycastParams)

			-- Check if the raycast worked
			if rayResult then

				if rayResult.Position then

					part.Position = rayResult.Position
				else

					part.Position = (character.HumanoidRootPart.Position + raycastDirection * raycastDistance)
				end
			else

				part.Position = (character.HumanoidRootPart.Position + raycastDirection * raycastDistance)
			end

			local light = Instance.new("PointLight")
			light.Parent = part
			light.Brightness = 8
			light.Range = 3
			light.Color = part.Color

		end

		item:Destroy()
	end

	-- Run user death gui
	DeathEvent:FireClient(user, "userDied", itemsValue)

	task.wait(6)

	-- Gather all items in backpack
	for _, object in pairs(dropedItemsFolder:GetChildren()) do
		object.Anchored = false

		-- Function to handle part hit
		object.Touched:Connect(function(hit)
			
			-- If touch is a humanoid then continue
			local humanoid = hit.Parent and hit.Parent:FindFirstChild("Humanoid")
			
			if not humanoid then 
				return 
			end

			-- If humanoid is a user then continue
			local user = playerService:GetPlayerFromCharacter(humanoid.Parent)
			
			if not user then
				return 
			end

			-- If user stats data has loaded
			local stats = user:FindFirstChild("stats")

			if not stats or stats.TotalBackPackinput.Value >= stats.BackPacksize.Value then
				return
			end

			local oreNumber = object:GetAttribute("ore")

			-- Creates slot for saving data if it does not yet exist
			if not stats.Inventory:FindFirstChild(oreNumber) then
				local new = Instance.new("IntValue")
				new.Parent = stats.Inventory
				new.Name = oreNumber
			end

			-- Add ore to user stat
			user.stats.Inventory[oreNumber].Value += 1

			-- Add ore to backpack storage
			stats.TotalBackPackinput.Value = stats.TotalBackPackinput.Value + (OreData[oreNumber].w)

			-- Notifaction to user
			NotificationEvent:FireClient(user, OreData[oreNumber or "p1"].n, 1, "Ore")

			object:Destroy()
		end)

	end

	-- Set folder to be removed after
	Debris:AddItem(dropedItemsFolder, 125)
end

-- User died function
playerService.PlayerAdded:Connect(function(user)
	user.CharacterAdded:Connect(function(character)
		character:WaitForChild("Humanoid").Died:Connect(function()		

			if character:FindFirstChild("HumanoidRootPart") then
				
				-- Run code concurent with main script
				task.spawn(function()
					
					-- Handle dropping user backpack
					dropBackPack(user, character)
				end)

				-- Destroy Pickaxe in backpack
				if user.Backpack:FindFirstChild("Pickaxe") then
					
					user.Backpack.Pickaxe:Destroy() 
				end
				
				-- Destroy Pickaxe on character
				if character:FindFirstChild("Pickaxe") then
					
					character.Pickaxe:Destroy()
				end

				-- Destroy backpack
				if character:FindFirstChild("PlayerBackPack") then
					
					character.PlayerBackPack:Destroy()
				end

				-- Generate orignal pickaxe
				loadpickaxe(user, "orignal")

				-- Generate new backpack
				local number = user.savingnonboolstats.backpacknumber.Value
				local clone = BackpackFolder["back"..number]:Clone()
				clone.Parent = character
				clone.Name = "PlayerBackPack"
				
				-- Clear user backpack
				user.stats.TotalBackPackinput.Value = 0
			end
			
		end)
	end)

end)

-- Open backpack shop button 1 gui
game.Workspace.Shop1.OpenShop1.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild("Humanoid") then
		if game.Players:FindFirstChild(hit.Parent.Name) then

			triggerShopGuiEvent:FireClient(game.Players:GetPlayerFromCharacter(hit.Parent), 1, game.Workspace.Shop1)
		end
	end 
end)

-- Open backpack shop button 2 gui
game.Workspace.Shop1.OpenShop2.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild("Humanoid") then
		if game.Players:FindFirstChild(hit.Parent.Name) then

			triggerShopGuiEvent:FireClient(game.Players:GetPlayerFromCharacter(hit.Parent), 1, game.Workspace.Shop1)
		end
	end 
end)


-- Open pickaxe shop button 1 gui
game.Workspace.Shop2.OpenShop1.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild("Humanoid") then
		if game.Players:FindFirstChild(hit.Parent.Name) then
			
			triggerShopGuiEvent:FireClient(game.Players:GetPlayerFromCharacter(hit.Parent), 2, game.Workspace.Shop2)
		end
	end 
end)

-- Open pickaxe shop button 2 gui
game.Workspace.Shop2.OpenShop2.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild("Humanoid") then
		if game.Players:FindFirstChild(hit.Parent.Name) then

			triggerShopGuiEvent:FireClient(game.Players:GetPlayerFromCharacter(hit.Parent), 2, game.Workspace.Shop2)
		end
	end 
end)


-- Open create pickaxe menu gui
game.Workspace.SpecialShop.OpenShop.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild("Humanoid") then
		if game.Players:FindFirstChild(hit.Parent.Name) then
			
			openCustomePickaxeGuiEvent:FireClient(game.Players:GetPlayerFromCharacter(hit.Parent))
		end 
	end 
end)

-- Open quest menu gui
ProximityPromptService.PromptTriggered:Connect(function(promptObject, user)
	
	openQuestGuiEvent:FireClient(user, promptObject)
end)
